#lib

add_library(rd_framework_cpp STATIC
        serialization/SerializationCtx.cpp serialization/SerializationCtx.h
        Identities.cpp Identities.h
        impl/RName.cpp impl/RName.h
        Buffer.cpp Buffer.h
        base/IRdBindable.h
        base/IRdReactive.h
        RdId.cpp RdId.h
        impl/RdSignal.h
        base/RdReactiveBase.cpp base/RdReactiveBase.h
        base/RdBindableBase.cpp base/RdBindableBase.h
        impl/RdProperty.h
        base/ext/RdExtBase.cpp base/ext/RdExtBase.h
        serialization/Serializers.cpp serialization/Serializers.h
        base/WireBase.cpp base/WireBase.h
        Protocol.cpp Protocol.h
        base/RdPropertyBase.h MessageBroker.cpp
        MessageBroker.h
        Buffer.cpp Buffer.h
        serialization/Polymorphic.cpp serialization/Polymorphic.h
        base/IProtocol.cpp base/IProtocol.h
        base/IRdDynamic.h
        base/IWire.h
        base/ISerializer.h
        base/IIdentities.h
        impl/RdList.h
        impl/RdMap.h
        wire/SocketWire.cpp wire/SocketWire.h
        wire/SocketScheduler.cpp wire/SocketScheduler.h
        impl/RdSet.h
        serialization/ISerializable.cpp serialization/ISerializable.h
        serialization/IMarshaller.cpp serialization/IMarshaller.h
        FrameworkMarshallers.cpp FrameworkMarshallers.h
        util/util.cpp util/util.h
        wire/threading/ByteBufferAsyncProcessor.cpp wire/threading/ByteBufferAsyncProcessor.h
        base/ext/ExtWire.cpp base/ext/ExtWire.h
        util/shared_function.cpp util/shared_function.h)

target_include_directories(rd_framework_cpp PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(rd_framework_cpp PUBLIC base)
target_include_directories(rd_framework_cpp PUBLIC impl)
target_include_directories(rd_framework_cpp PUBLIC serialization)
target_include_directories(rd_framework_cpp PUBLIC util)
target_include_directories(rd_framework_cpp PUBLIC wire)
add_subdirectory(wire)

target_link_libraries(rd_framework_cpp PUBLIC rd_core_cpp clsocket)

if (UNIX)
    add_definitions(-D_LINUX)
endif ()
